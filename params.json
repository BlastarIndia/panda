{"name":"Panda","tagline":"A easy to learn, translatable language that compiles to JavaScript.","body":":panda_face: Panda\r\n=====\r\nA easy to learn, translatable language that compiles to JavaScript.\r\n\r\nStatus\r\n------\r\n\r\nThe whole thing is very much a proof of concept right now. I'm learning as I go\r\nalong, it's not all easy but it's fun!\r\n\r\nThe biggest task at the moment is getting rid of the Shift-Reduce conflicts in\r\nthe grammar.\r\n\r\nThen I will consolidate what I already have, add the missing constructs (most\r\nnotably classes), and then focus on writing a few examples and translating the\r\nlanguage to French.\r\n\r\nPhilosophy\r\n----------\r\n\r\nPanda is a programming language designed with children in mind.\r\nIt cross compiles to JavaScript, like CoffeScript (and others), because I want\r\nto make sharing creations easy, and what is easier than running code in\r\nthe browser?\r\n\r\nI am French, and I believe that one of the big obstacles in teaching\r\nprogramming to kids is the language barrier. That's why one of the aims of this\r\nproject is also to create a language that has several translations, starting\r\nwith French and English.\r\n\r\nAnother long-term goal of Panda is to provide an easy to use graphics library\r\nthat can be used to interact with the HTML5 `<canvas>` element.\r\n\r\nJavaScript is not an easy language; it is full of quirks and corner cases.\r\nThe inspiration for the syntax of Panda is mostly Python, with a bit\r\nof Ruby, and CoffeeScript.\r\n\r\n\r\nExamples\r\n--------\r\n\r\nNothing in here is set in stone, and some of this code doesn't even compile yet.\r\n\r\n### English version\r\n\r\n```\r\n# Lines starting with '#' are comments.\r\n\r\n# 1. Primitive data types and operators\r\n#======================================\r\n\r\n# The basics look just like Python (for the English version!)\r\n\r\n# Numbers\r\n3  # => 3\r\n2.51  # => 2.51\r\n\r\n# Math\r\n1 + 1  # => 2\r\n8 - 1  # => 7\r\n10 * 2 # => 20\r\n35 / 5 # => 7\r\n\r\n# Enforce precedence with parentheses\r\n(1 + 3) * 2  # => 8\r\n\r\n# Booleans\r\ntrue\r\nfalse\r\n\r\n# Negate with not\r\nnot true  # => false\r\nnot false  # => true\r\n\r\n# Equality is == (this is actually JavaScript's ===)\r\n1 == 1  # => true\r\n2 == 1  # => false\r\n\r\n# Inequality is != (js: !==)\r\n1 != 1  # => false\r\n2 != 1  # => true\r\n\r\n# More comparisons\r\n1 < 10  # => true\r\n1 > 10  # => false\r\n2 <= 2  # => true\r\n2 >= 2  # => true\r\n\r\n# Comparisons can be chained like in Python/CoffeeScript\r\n1 < 2 < 3  # => true\r\n2 < 3 < 2  # => false\r\n\r\n\r\n\r\n# 2. Variables and collections\r\n#=============================\r\n\r\n# Declare a variable using the var keyword\r\nvar x = 5\r\n\r\n# Let's make a list\r\nvar my_list = []\r\n\r\n# You can also fill it from the beginning\r\nvar some_list = [1, 2, 3, 4]\r\n\r\n# You can create ranges of values with [a..b]\r\n[5..8]  # => [5, 6, 7, 8]\r\n\r\n# Check if something is in a list with 'in'\r\n3 in [1, 3, 5]  # => true\r\n\r\n\r\n# Objects are pretty much the same as in js\r\nvar my_object = {'property1': value1, 'property2': value2}\r\n\r\n\r\n\r\n# 3. Control flow\r\n#================\r\n\r\n# If statements are ended with the 'end' keyword like in Ruby\r\nif x > 5:\r\n    console.log(\"I'm over 5!\")\r\nelse if x < 5:\r\n    console.log(\"Under 5 here\")\r\nelse:\r\n    console.log(\"This is mambo number 5\")\r\nend\r\n\r\n\r\n# For loops work like in Python, iterating over arrays\r\nfor thing in thing_list:\r\n    do_something_with(thing)\r\nend\r\n\r\n\r\n# While loops are pretty straightforward\r\nvar x = 0\r\nwhile x < 4:\r\n    console.log(x)\r\n    x += 1\r\nend\r\n```\r\n\r\n\r\n### French version\r\n\r\n```\r\n# Les lignes qui commencent par un # sont des commentaires.\r\n\r\n# 1. Types primitifs et opérateurs\r\n#=================================\r\n\r\n# La base ressemble à du Python traduit\r\n\r\n# Nombres\r\n3  # => 3\r\n2.51  # => 2.51\r\n\r\n# Maths\r\n1 + 1  # => 2\r\n8 - 1  # => 7\r\n10 * 2 # => 20\r\n35 / 5 # => 7\r\n\r\n# Les parenthèses indiquent la précédence\r\n(1 + 3) * 2  # => 8\r\n\r\n# Booleens\r\nvrai\r\nfaux\r\n\r\n# La négation se fait avec pas\r\npas vrai  # => faux\r\npas faux  # => vrai\r\n\r\n# L'égalité se teste avec == (équivalent du === en js)\r\n1 == 1  # => vrai\r\n2 == 1  # => faux\r\n\r\n# Inégalité != (js: !==)\r\n1 != 1  # => faux\r\n2 != 1  # => vrai\r\n\r\n# Comparaisons\r\n1 < 10  # => vrai\r\n1 > 10  # => faux\r\n2 <= 2  # => vrai\r\n2 >= 2  # => vrai\r\n\r\n# Les comparaisons peuvent etre mises bout à bout comme en Python/CoffeeScript\r\n1 < 2 < 3  # => vrai\r\n2 < 3 < 2  # => faux\r\n\r\n\r\n\r\n# 2. Variables and collections\r\n#=============================\r\n\r\n# Declarons une variable a l'aide du mot cle 'var'\r\nvar x = 5\r\n\r\n# Construisons une liste\r\nvar ma_liste = []\r\n\r\n# On peut la remplir des le debut\r\nvar une_list = [1, 2, 3, 4]\r\n\r\n# Il est possible de creer des intervalles d'entiers: [a..b]\r\n[5..8]  # => [5, 6, 7, 8]\r\n\r\n# Tester si un élément fait partie d'une liste\r\n3 dans [1, 3, 5]  # => vrai\r\n\r\n\r\n# Les objects sont pratiquement les memes qu'en JavaScript\r\nvar mon_objet = {'propriété1': valeur1, 'propriété2': valeur2}\r\n\r\n\r\n\r\n# 3. Structures de controle\r\n#==========================\r\n\r\n# Les blocs 'if' sont delimites par le mot 'fin', un peu comme en Ruby\r\nsi x > 5:\r\n    console.log(\"Plus de 5 !\")\r\nsinon si x < 5:\r\n    console.log(\"Moins que 5\")\r\nsinon:\r\n    console.log(\"Exactement 5\")\r\nfin\r\n\r\n\r\n# Les boucles for fonctionnent comme en Python, itérant sur une liste\r\npour truc dans liste_de_trucs:\r\n    faire_qqchose(truc)\r\nfin\r\n\r\n\r\n# Boucle while\r\nvar x = 0\r\ntantque x < 4:\r\n    console.log(x)\r\n    x += 1\r\nfin\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}